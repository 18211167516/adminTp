<?php
//配置文件
return [
        'API_URL'=>'http://api.think.com',
        'template'  =>  [
                'layout_on'     =>  true,
                'layout_name'   =>  'layout',
        ],
        'role_file'=> [
                'admin'=>APP_PATH.'/admin/controller',
                'demo'=>APP_PATH.'/demo/controller',
        ],
        //不验证权限文件
        'filter_arr' => [
                'admin'=> ['Login','Common','Index'],
                'demo' => ['Index'],
        ],
        'desc' => [
                'redis_version' => 'Redis 服务器版本',
                'redis_git_sha1' => 'Git SHA1',
                'redis_git_dirty' => 'Git dirty flag',
                'os' => 'Redis 服务器的宿主操作系统',
                'arch_bits' => '架构（32 或 64 位）',
                'multiplexing_api' => 'Redis 所使用的事件处理机制',
                'gcc_version' => '编译 Redis 时所使用的 GCC 版本',
                'process_id' => '服务器进程的 PID',
                'run_id' => 'Redis 服务器的随机标识符（用于 Sentinel 和集群）',
                'tcp_port' => 'TCP/IP 监听端口',
                'lru_clock' => '以分钟为单位进行自增的时钟，用于 LRU 管理',
                'uptime_in_seconds' => '自 Redis 服务器启动以来，经过的秒数',
                'uptime_in_days' => '自 Redis 服务器启动以来，经过的天数',
                'connected_clients' => '已连接客户端的数量',
                'used_memory' => '由 Redis 分配器分配的内存总量',
                'used_memory_human' => '以人类可读的格式返回 Redis 分配的内存总量',
                'used_memory_rss' => '从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。',
                'used_memory_peak' => 'Redis 的内存消耗峰值（以字节为单位）',
                'used_memory_peak_human' => '以人类可读的格式返回 Redis 的内存消耗峰值',
                'used_memory_lua' => 'Lua 引擎所使用的内存大小（以字节为单位）',
                'mem_fragmentation_ratio' => 'used_memory_rss 和 used_memory 之间的比率',
                'mem_allocator' => '在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc',
                'used_cpu_sys' => 'Redis 服务器耗费的系统 CPU ',
                'used_cpu_user' => 'Redis 服务器耗费的用户 CPU ',
                'used_cpu_sys_children' => '后台进程耗费的系统 CPU ',
                'used_cpu_user_children' => '后台进程耗费的用户 CPU',
        
                'connected_clients' => '已连接客户端的数量（不包括通过从属服务器连接的客户端）',
                'client_longest_output_list' => '当前连接的客户端当中，最长的输出列表',
                'client_longest_input_buf' => '当前连接的客户端当中，最大输入缓存',
                'blocked_clients' => '正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量',
        
                'total_connections_received' => '服务器已接受的连接请求数量。',
                'total_commands_processed' => '服务器已执行的命令数量。',
                'instantaneous_ops_per_sec' => '服务器每秒钟执行的命令数量',
                'rejected_connections' => '因为最大客户端数量限制而被拒绝的连接请求数量',
                'expired_keys' => '因为过期而被自动删除的数据库键数量。',
                'evicted_keys' => '因为最大内存容量限制而被驱逐（evict）的键数量',
                'keyspace_hits' => '查找数据库键成功的次数。',
                'keyspace_misses' => '查找数据库键失败的次数。',
                'pubsub_channels' => '目前被订阅的频道数量。',
                'pubsub_patterns' => '目前被订阅的模式数量。',
                'latest_fork_usec' => '最近一次 fork() 操作耗费的毫秒数。',
                'connected_slaves' => '已连接的从服务器数量。',
                'role' => '如果当前服务器没有在复制任何其他服务器，那么这个域的值就是 master ；否则的话，这个域的值就是 slave 。注意，在创建复制链的时候，一个从服务器也可能是另一个服务器的主服务器',
                'connected_slaves' => '已连接的从服务器数量。',
                'cluster_enabled' => '一个标志值，记录集群功能是否已经开启。',
        ]
];